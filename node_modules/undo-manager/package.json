{
  "name": "undo-manager",
  "version": "1.0.5",
  "description": "Simple undo manager to provide undo and redo actions in JavaScript applications.",
  "main": "lib/undomanager.js",
  "directories": {
    "test": "test"
  },
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ArthurClemens/Javascript-Undo-Manager.git"
  },
  "keywords": [
    "undo"
  ],
  "author": {
    "name": "Arthur Clemens",
    "email": "arthurclemens@gmail.com",
    "url": "http://visiblearea.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ArthurClemens/Javascript-Undo-Manager/issues"
  },
  "homepage": "https://github.com/ArthurClemens/Javascript-Undo-Manager",
  "jspm": {
    "directories": {
      "lib": "lib"
    },
    "files": [
      "lib"
    ]
  },
  "readme": "# Undo Manager\n\nSimple undo manager to provide undo and redo actions in JavaScript applications.\n\n\n## Demos\n\n* [Undo Manager with  canvas drawing](http://arthurclemens.github.com/Javascript-Undo-Manager/)\n* [JSBin demo, also with canvas](http://jsbin.com/tidibi/edit?js,output)\n\n\n## Installation\n\n### npm\n\n`npm install undo-manager`\n\n### Bower\n\n`bower install undo-manager`\n\n### jspm\n\n`jspm install npm:undo-manager`\n\n\n## Background\n\nActions (typing a character, moving an object) are structured as command pairs: one command for destruction (undo)  and one for creation (redo). Each pair is added to the undo stack:\n\n~~~javascript\nvar undoManager = new UndoManager();\nundoManager.add({\n    undo: function() {\n        // ...\n    },\n    redo: function() {\n        // ...\n    }\n});\n~~~\n\nNote that you are responsible for the initial creation; Undo Manager only bothers with destruction and recreation.\n\n### Example\n\n~~~javascript\nvar undoManager = new UndoManager(),\n    people = {},\n    addPerson,\n    removePerson,\n    createPerson;        \n\naddPerson = function(id, name) {\n    people[id] = name;\n};\n\nremovePerson = function(id) {\n    delete people[id];\n};\n\ncreatePerson = function (id, name) {\n    // first creation\n    addPerson(id, name);\n\n    // make undo-able\n    undoManager.add({\n        undo: function() {\n            removePerson(id)\n        },\n        redo: function() {\n            addPerson(id, name);\n        }\n    });\n}\n\ncreatePerson(101, \"John\");\ncreatePerson(102, \"Mary\");\n\nconsole.log(\"people\", people); // {101: \"John\", 102: \"Mary\"}\n\nundoManager.undo();\nconsole.log(\"people\", people); // {101: \"John\"}\n\nundoManager.undo();\nconsole.log(\"people\", people); // {}\n\nundoManager.redo();\nconsole.log(\"people\", people); // {101: \"John\"}\n~~~\n\n\n## Methods\n\n    undoManager.undo();\n\nPerforms the undo action.\n\n\n    undoManager.redo();\n\nPerforms the redo action.\n\n\n    undoManager.clear();\n\nClears all stored states.\n\n\n\tundoManager.setLimit(limit);\n\nSet the maximum number of undo steps. Default: 0 (unlimited).\n\n\n\tvar hasUndo = undoManager.hasUndo();\n\nTests if any undo actions exist.\n\n\n    var hasRedo = undoManager.hasRedo();\n\nTests if any redo actions exist.\n\n\n\tundoManager.setCallback(myCallback);\n\nGet notified on changes.\n\n\n    var index = undoManager.getIndex();\n\nReturns the index of the actions list.\n\n\n\n## Use with CommonJS (Webpack, Browserify, Node, etc)\n\n`npm install undo-manager`\n\n`var UndoManager = require('undo-manager')`\n\nIf you only need a single instance of UndoManager throughout your application, it may be wise to create a module that exports a singleton:\n\nIn `undoManager.js`:\n\n~~~javascript\n    var UndoManager = require('undo-manager'); // require the lib from node_modules\n    var singleton;\n\n    if (!singleton) {\n        singleton = new UndoManager();\n    }\n\n    module.exports = singleton;\n~~~\n\nThen in your app:\n\n~~~javascript\n    var undoManager = require('undoManager');\n\n    undoManager.add(...);\n    undoManager.undo();\n~~~\n\n\n## Use with RequireJS\n\nIf you are using RequireJS, you need to use the ``shim`` config parameter.\n\nAssuming ``require.js`` and ``domReady.js`` are located in ``js/extern``, the ``index.html`` load call would be:\n\n~~~html\n<script src=\"js/extern/require.js\" data-main=\"js/demo\"></script>\n~~~\n\nAnd ``demo.js`` would look like this:\n\n~~~javascript\nrequirejs.config({\n    baseUrl: \"js\",\n    paths: {\n        domReady: \"extern/domReady\",\n        app: \"../demo\",\n        undomanager: \"../../js/undomanager\",\n        circledrawer: \"circledrawer\"\n    },\n    shim: {\n        \"undomanager\": {\n            exports: \"UndoManager\"\n        },\n        \"circledrawer\": {\n            exports: \"CircleDrawer\"\n        }\n    }\n});\n\nrequire([\"domReady\", \"undomanager\", \"circledrawer\"], function(domReady, UndoManager, CircleDrawer) {\n    \"use strict\";\n\n    var undoManager,\n        circleDrawer,\n        btnUndo,\n        btnRedo,\n        btnClear;\n\n    undoManager = new UndoManager();\n    circleDrawer = new CircleDrawer(\"view\", undoManager);\n\n    // etcetera\n});\n~~~\n",
  "readmeFilename": "README.md",
  "_id": "undo-manager@1.0.5",
  "_from": "undo-manager@"
}
